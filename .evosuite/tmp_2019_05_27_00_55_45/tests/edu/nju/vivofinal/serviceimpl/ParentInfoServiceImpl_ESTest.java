/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:06:09 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.ApplicationDao;
import edu.nju.vivofinal.dao.ParentInfoDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.model.Application;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParentInfoServiceImpl_ESTest extends ParentInfoServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(applicationDao0).saveApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn(835L).when(parent0).getParentId();
      doReturn("Xb=sLH").when(parent0).getParentName();
      doReturn("").when(parent0).getParentPassword();
      doReturn("B9=pGfX7@/k'VtECZ").when(parent0).getStudentId();
      doReturn("iw").when(parent0).getStudentName();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher((String) null, (String) null, "9ZBjV", "9ZBjV", linkedHashSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("", "G{!A\"h1$9z\"K]i_.1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail((String) null);
      assertNull(parent1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      parent0.setParentId(1L);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("X");
      assertNull(parent1.getStudentId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent(">_&XtY", ">_&XtY", ">_&XtY", ">_&XtY", ">_&XtY", "qIydXTs$8");
      parent0.setParentId((-1L));
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("$j1}_`]bBga ");
      assertSame(parent1, parent0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("Slice %d containing %s instances");
      assertEquals(0L, parent1.getParentId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      Application application0 = mock(Application.class, new ViolatedAssumptionAnswer());
      Application application1 = mock(Application.class, new ViolatedAssumptionAnswer());
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0, application1).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true, false).when(applicationDao0).updateApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.disagreeApplication(1L);
      boolean boolean1 = parentInfoServiceImpl0.disagreeApplication(1L);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Vector<Parent> vector0 = new Vector<Parent>();
      Parent parent0 = new Parent("entity is marked @NonNull but is null", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, (List) null).when(parentInfoDao0).findAllParents();
      doReturn(false, false).when(parentInfoDao0).updateParentInfo(any(edu.nju.vivofinal.model.Parent.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      parentInfoServiceImpl0.updateParentInfo(parent0);
      parentInfoServiceImpl0.updateParentInfo(parent0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.findParentByMail((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn((Application) null).when(applicationDao0).findApplicationById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.disagreeApplication(88L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.applyToJoinClass("]Wh@-8/PgN0w}SN", "}<|2&#Lb<UL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn((Application) null).when(applicationDao0).findApplicationById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.agreeApplication(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("Slice %d containing %s instances", "TypeInformation must not be null or empty!", "TypeInformation must not be null or empty!", "-", (Set<Parent>) null, treeSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("-", "Slice %d containing %s instances");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      Teacher teacher0 = new Teacher("", "", (String) null, "", hashSet0, (Set<ExamScore>) null);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass(", ignoring case", "JT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent("entity is marked @NonNull but is null", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("ic3", "}uf,>zdfHI9a&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("Fi0#6*+csB", "edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      Application application0 = new Application("0H[sX", 0L, "0H[sX", (String) null, (String) null, true);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true).when(applicationDao0).updateApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      Teacher teacher0 = new Teacher("", "", (String) null, "", hashSet0, (Set<ExamScore>) null);
      teacher0.setTeacherPassword("");
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(true).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      Application application0 = new Application("-", 1L, "-", "-", "-", false);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0, application0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(false, false).when(applicationDao0).updateApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0, parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("Slice %d containing %s instances", "TypeInformation must not be null or empty!", "TypeInformation must not be null or empty!", "-", (Set<Parent>) null, treeSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(582L);
      boolean boolean1 = parentInfoServiceImpl0.agreeApplication(582L);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      Application application0 = mock(Application.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(application0).getParentId();
      doReturn("}uf,>zdfHI9a&").when(application0).getTeacherMail();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true).when(applicationDao0).updateApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent("entity is marked @NonNull but is null", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Vector<Parent> vector0 = new Vector<Parent>();
      Parent parent0 = new Parent("entity is marked @NonNull but is null", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null");
      vector0.add(parent0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(parentInfoDao0).findAllParents();
      doReturn(true).when(parentInfoDao0).updateParentInfo(any(edu.nju.vivofinal.model.Parent.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = new Parent("*o&I^5", "Ps5txbF)vW>K", "*o&I^5", "edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", "Ps5txbF)vW>K", "*o&I^5");
      boolean boolean0 = parentInfoServiceImpl0.updateParentInfo(parent1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Vector<Parent> vector0 = new Vector<Parent>();
      Parent parent0 = new Parent("entity is marked @NonNull but is null", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null", "}uf,>zdfHI9a&", "entity is marked @NonNull but is null");
      vector0.add(parent0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(parentInfoDao0).findAllParents();
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.updateParentInfo(parent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      Application application0 = mock(Application.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(application0).getParentId();
      doReturn((String) null).when(application0).getTeacherMail();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true).when(applicationDao0).updateApplication(any(edu.nju.vivofinal.model.Application.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Parent parent0 = new Parent("", "|f5U3y^8[gL}", "", "|f5U3y^8[gL}", "", "|f5U3y^8[gL}");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(0L);
      assertFalse(boolean0);
  }
}
