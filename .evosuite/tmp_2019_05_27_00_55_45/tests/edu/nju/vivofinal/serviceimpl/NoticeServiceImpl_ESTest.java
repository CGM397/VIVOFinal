/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:08:01 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.CommonNoticeDao;
import edu.nju.vivofinal.dao.ParentInfoDao;
import edu.nju.vivofinal.dao.SpecificNoticeDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.ScoreItem;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.serviceimpl.NoticeServiceImpl;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.mail.javamail.JavaMailSender;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoticeServiceImpl_ESTest extends NoticeServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(specificNoticeDao0).saveSpecificNotice(any(edu.nju.vivofinal.model.SpecificNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      Vector<Long> vector0 = new Vector<Long>(linkedHashSet0);
      Long long0 = new Long((-593L));
      vector0.addElement(long0);
      boolean boolean0 = noticeServiceImpl0.sendSomeSpecificNotices(0L, vector0, "\u5F97\u5206\uFF1A", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>();
      Vector<Long> vector0 = new Vector<Long>(linkedHashSet0);
      boolean boolean0 = noticeServiceImpl0.sendSomeSpecificNotices(0L, vector0, "\u5F97\u5206\uFF1A", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(specificNoticeDao0).saveSpecificNotice(any(edu.nju.vivofinal.model.SpecificNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean0 = noticeServiceImpl0.sendOneSpecificNotice(0L, 0L, "Q1>s3K3h*fVy|C", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(specificNoticeDao0).saveSpecificNotice(any(edu.nju.vivofinal.model.SpecificNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean0 = noticeServiceImpl0.sendOneSpecificNotice((-1L), 0L, "replyTo=", "replyTo=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(commonNoticeDao0).saveCommonNotice(any(edu.nju.vivofinal.model.CommonNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet0 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("", "", "", ";c=", hashSet0, linkedHashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean0 = noticeServiceImpl0.sendCommonNotice(550L, "t5*", "b *x_ajDF;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedHashSet<Long> linkedHashSet0 = new LinkedHashSet<Long>(1522);
      Long long0 = new Long((-619L));
      linkedHashSet0.add(long0);
      linkedList0.addAll((Collection<? extends Long>) linkedHashSet0);
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendSomeSpecificNotices((-619L), linkedList0, (String) null, " \u5B66\u751F\u6210\u7EE9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.NoticeServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendOneSpecificNotice(2804L, 2804L, " \u5B66\u751F\u6210\u7EE9", "#d=MLaz>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.NoticeServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("\u5F97\u5206\uFF1A", "\u5F97\u5206\uFF1A", "TypeInformation must not be null or empty!", "", linkedHashSet0, treeSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      ExamScore examScore0 = new ExamScore();
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendExamScore(0L, examScore0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendCommonNotice(2045L, "hc(9KQVv]", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByStudentId(anyString());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((Set<ExamScore>) null).when(teacher0).getExamScores();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      doReturn(true).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem();
      scoreItem0.setStudentId("<");
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      boolean boolean0 = noticeServiceImpl0.sendExamScore(1451L, examScore0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent("0.4E#HO'f{", "l8o?kf.4 8n?AJ2v", "\u5F97\u5206\uFF1A", "r}W86:`{y", "", "\u5F97\u5206\uFF1A");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByStudentId(anyString());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(specificNoticeDao0).saveSpecificNotice(any(edu.nju.vivofinal.model.SpecificNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      doReturn(true).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem();
      scoreItem0.setStudentId("f%S|v42");
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      boolean boolean0 = noticeServiceImpl0.sendExamScore(1451L, examScore0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      doReturn(true).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      ExamScore examScore0 = new ExamScore();
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendExamScore(1451L, examScore0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.NoticeServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByStudentId(anyString());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(teacher0).getExamScores();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, (Teacher) null).when(teacherInfoDao0).findTeacherById(anyLong());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(edu.nju.vivofinal.model.Teacher.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem();
      scoreItem0.setStudentId("f%S|v42");
      scoreItem0.setStudentId("f%S|v42");
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      examScore0.setExamName(">ODy");
      noticeServiceImpl0.sendExamScore(1451L, examScore0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      noticeServiceImpl0.sendSomeSpecificNotices((-711L), linkedList0, "hc(9KQVv]", "hc(9KQVv]");
      // Undeclared exception!
      try { 
        noticeServiceImpl0.sendCommonNotice(2045L, "hc(9KQVv]", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.NoticeServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean0 = noticeServiceImpl0.sendSomeSpecificNotices(550L, (List<Long>) null, "t5*", ";c=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(commonNoticeDao0).saveCommonNotice(any(edu.nju.vivofinal.model.CommonNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      Parent parent0 = new Parent();
      boolean boolean0 = linkedHashSet0.add(parent0);
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("Qcn,4aZs_n?ErlLN}.", "Qcn,4aZs_n?ErlLN}.", "xkPT,X8&Qdx4U", "Qcn,4aZs_n?ErlLN}.", linkedHashSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean1 = noticeServiceImpl0.sendCommonNotice(0L, "", "");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoticeServiceImpl noticeServiceImpl0 = new NoticeServiceImpl();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(specificNoticeDao0).saveSpecificNotice(any(edu.nju.vivofinal.model.SpecificNotice.class));
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(noticeServiceImpl0, (Class<?>) NoticeServiceImpl.class);
      boolean boolean0 = noticeServiceImpl0.sendOneSpecificNotice(0L, (-188L), "\u5F97\u5206\uFF1A", "\u5F97\u5206\uFF1A");
      assertTrue(boolean0);
  }
}
