/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:23:44 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.daoimpl.ExamScoreDaoImpl;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Teacher;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExamScoreDaoImpl_ESTest extends ExamScoreDaoImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.updateExamScore((ExamScore) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.saveExamScore((ExamScore) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(teacher0).getExamScores();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      // Undeclared exception!
      try { 
        examScoreDaoImpl0.findAllExamScores((-558L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).delete(any(java.lang.Class.class) , anyLong());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.deleteExamScore(3402L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(":BLF,b$$|Au").when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      // Undeclared exception!
      try { 
        examScoreDaoImpl0.findExamScoreById(1L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to edu.nju.vivofinal.model.ExamScore
         //
         verifyException("edu.nju.vivofinal.daoimpl.ExamScoreDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).delete(any(java.lang.Class.class) , anyLong());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.deleteExamScore(479L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.saveExamScore((ExamScore) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      ExamScore examScore0 = examScoreDaoImpl0.findExamScoreById(479L);
      assertNull(examScore0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ExamScoreDaoImpl examScoreDaoImpl0 = new ExamScoreDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).update(any());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(examScoreDaoImpl0, (Class<?>) ExamScoreDaoImpl.class);
      boolean boolean0 = examScoreDaoImpl0.updateExamScore((ExamScore) null);
      assertFalse(boolean0);
  }
}
