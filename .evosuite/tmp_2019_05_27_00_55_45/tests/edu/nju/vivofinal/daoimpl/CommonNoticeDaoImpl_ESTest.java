/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:11:20 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl;
import edu.nju.vivofinal.model.CommonNotice;
import java.time.Instant;
import java.time.format.FormatStyle;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommonNoticeDaoImpl_ESTest extends CommonNoticeDaoImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice0 = new CommonNotice();
      boolean boolean0 = commonNoticeDaoImpl0.saveCommonNotice(commonNotice0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice0 = new CommonNotice();
      boolean boolean0 = commonNoticeDaoImpl0.saveCommonNotice(commonNotice0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      CommonNotice commonNotice0 = new CommonNotice();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice1 = commonNoticeDaoImpl0.findCommonNoticeById(1L);
      assertEquals(0L, commonNotice1.getCommonNoticeId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      CommonNotice commonNotice0 = new CommonNotice((Date) null, 1L, "org.springframework.web.method.HandlerTypePredicate$Builder", "");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, commonNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      commonNoticeDaoImpl0.findCommonNoticeById(3438L);
      CommonNotice commonNotice1 = commonNoticeDaoImpl0.findCommonNoticeById(1L);
      assertSame(commonNotice1, commonNotice0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      MockDate mockDate0 = new MockDate((-2), (-2), 0);
      CommonNotice commonNotice0 = new CommonNotice(mockDate0, (-2), (String) null, (String) null);
      commonNotice0.setCommonNoticeId((-2));
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice1 = commonNoticeDaoImpl0.findCommonNoticeById((-3979L));
      assertEquals((-2L), commonNotice1.getCommonNoticeId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      FormatStyle formatStyle0 = FormatStyle.FULL;
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(formatStyle0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.findCommonNoticeById(2446L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.FormatStyle cannot be cast to edu.nju.vivofinal.model.CommonNotice
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<String> query1 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query<CommonNotice>) null).when(session1).createQuery(anyString());
      doReturn(transaction1).when(session1).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session1).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices((-1L));
      List<CommonNotice> list1 = commonNoticeDaoImpl0.findAllCommonNotices((-1L));
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices(0L);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, (List) null).when(query0).list();
      doReturn((Query<Object>) null).when(query0).setParameter(anyInt() , any());
      FormatStyle formatStyle0 = FormatStyle.FULL;
      vector0.add((Object) formatStyle0);
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices((-1087L));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      Instant instant0 = MockInstant.ofEpochSecond(184L, 184L);
      Date date0 = Date.from(instant0);
      CommonNotice commonNotice0 = new CommonNotice(date0, (-895L), "Method must not be null!", "Method must not be null!");
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.saveCommonNotice(commonNotice0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.findCommonNoticeById((-1698L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }
}
