/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:14:32 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.ApplicationDaoImpl;
import edu.nju.vivofinal.model.Application;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationDaoImpl_ESTest extends ApplicationDaoImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Application application0 = new Application("#@@)pn?P9]{Yc", 0L, (String) null, (String) null, "", false);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(baseDao0).update(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      boolean boolean0 = applicationDaoImpl0.updateApplication(application0);
      applicationDaoImpl0.updateApplication(application0);
      boolean boolean1 = applicationDaoImpl0.updateApplication(application0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      Application application0 = new Application();
      boolean boolean0 = applicationDaoImpl0.saveApplication(application0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Application application0 = new Application("t}/r>uW0f:j$C\"e]", 1151L, "edu.nju.vivofinal.model.Application", "\"e:T`iN}9#<]\"<DibV", "", true);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      Application application1 = applicationDaoImpl0.findApplicationById(0L);
      assertEquals("", application1.getStudentName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Application application0 = new Application("#@@)pn?P9]{Yc", 0L, (String) null, (String) null, "", false);
      Application application1 = new Application((String) null, (-1L), (String) null, "", "", false);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, application0, application0, application1).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      applicationDaoImpl0.findApplicationById((-1L));
      applicationDaoImpl0.findApplicationById(0L);
      applicationDaoImpl0.findApplicationById((-2139L));
      Application application2 = applicationDaoImpl0.findApplicationById((-2139L));
      assertFalse(application2.isChecked());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Application application0 = new Application();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(application0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      application0.setApplicationId(1194L);
      Application application1 = applicationDaoImpl0.findApplicationById(3924L);
      assertEquals(1194L, application1.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      // Undeclared exception!
      try { 
        applicationDaoImpl0.findApplicationById(1683L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.ApplicationDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(baseDao0).getSession();
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      List<Application> list0 = applicationDaoImpl0.findApplicationsByTeacherMail("J%");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list();
      doReturn((Query) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      List<Application> list0 = applicationDaoImpl0.findApplicationsByTeacherMail("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      Application application0 = new Application();
      boolean boolean0 = applicationDaoImpl0.saveApplication(application0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      Object object0 = new Object();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      // Undeclared exception!
      try { 
        applicationDaoImpl0.findApplicationById(0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to edu.nju.vivofinal.model.Application
         //
         verifyException("edu.nju.vivofinal.daoimpl.ApplicationDaoImpl", e);
      }
  }
}
