/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:19:56 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.controller.ParentIndexController;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.service.ParentInfoService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.ui.Model;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParentIndexController_ESTest extends ParentIndexController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(string0);
      
      ParentInfoService parentInfoService1 = parentIndexController0.parentInfoServiceImpl;
      assertSame(parentInfoService1, parentInfoService0);
      assertNotNull(parentInfoService1);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService1;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpSession httpSession1 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession1).when(httpServletRequest1).getSession(anyBoolean());
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string1 = parentIndexController0.parentHome(httpServletRequest1, httpServletResponse1);
      assertEquals("parent/parent-home", string1);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ParentInfoService parentInfoService2 = parentIndexController0.parentInfoServiceImpl;
      assertSame(parentInfoService2, parentInfoService0);
      assertSame(parentInfoService2, parentInfoService1);
      assertNotNull(parentInfoService2);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService2;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      String string2 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string2);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string3);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string4);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      HttpSession httpSession2 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse2 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession3 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(parentIndexController0.parentInfoServiceImpl).when(httpSession3).getAttribute(anyString());
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession3).when(httpServletRequest3).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      Model model1 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentIndexController0.parentInfo(httpServletRequest3, model1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.service.ParentInfoService$MockitoMock$1854701477 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(parent0).getInfoCompleteDegree();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoService0).findParentByMail(anyString());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = parentIndexController0.parentHome(httpServletRequest0, httpServletResponse0);
      assertEquals("parent/parent-home", string0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(string0);
      
      ParentInfoService parentInfoService1 = parentIndexController0.parentInfoServiceImpl;
      assertSame(parentInfoService1, parentInfoService0);
      assertNotNull(parentInfoService1);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService1;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpSession httpSession1 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession1).when(httpServletRequest1).getSession(anyBoolean());
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string1 = parentIndexController0.parentHome(httpServletRequest1, httpServletResponse1);
      assertEquals("parent/parent-home", string1);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(string1);
      
      ParentInfoService parentInfoService2 = parentIndexController0.parentInfoServiceImpl;
      assertSame(parentInfoService2, parentInfoService0);
      assertSame(parentInfoService2, parentInfoService1);
      assertNotNull(parentInfoService2);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService2;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      String string2 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string2);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string3);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string4);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      HttpSession httpSession2 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest2 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession2).when(httpServletRequest2).getSession(anyBoolean());
      HttpServletResponse httpServletResponse2 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string5 = parentIndexController0.parentHome(httpServletRequest2, httpServletResponse2);
      assertEquals("parent/parent-home", string5);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      HttpSession httpSession3 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("GET").when(httpSession3).getAttribute(anyString());
      HttpServletRequest httpServletRequest3 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession3).when(httpServletRequest3).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      Model model1 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn(model0, (Model) null).when(model1).addAttribute(anyString() , any());
      String string6 = parentIndexController0.parentInfo(httpServletRequest3, model1);
      assertEquals("parent/parent-info", string6);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      HttpServletRequest httpServletRequest4 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest4).getSession(anyBoolean());
      Model model2 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentIndexController0.parentInfo(httpServletRequest4, model2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = parentIndexController0.parentHome(httpServletRequest0, httpServletResponse0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNull(string0);
      
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest1).getSession(anyBoolean());
      HttpServletResponse httpServletResponse1 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string1 = parentIndexController0.parentHome(httpServletRequest1, httpServletResponse1);
      assertEquals("parent/parent-home", string1);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(string1);
      
      String string2 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string2);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn((Model) null).when(model0).addAttribute(anyString() , any());
      // Undeclared exception!
      try { 
        parentIndexController0.parentInfo(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      String string0 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      ParentInfoService parentInfoService1 = parentIndexController0.parentInfoServiceImpl;
      assertSame(parentInfoService1, parentInfoService0);
      assertNotNull(parentInfoService1);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService1;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpServletRequest httpServletRequest0 = null;
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentIndexController0.parentHome((HttpServletRequest) null, httpServletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      ParentIndexController parentIndexController1 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController1.parentScore());
      assertFalse(parentIndexController1.equals((Object)parentIndexController0));
      assertNotNull(parentIndexController1);
      
      ParentInfoService parentInfoService1 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController1, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService1);
      assertEquals("parent/parent-score", parentIndexController1.parentScore());
      assertNotSame(parentIndexController1, parentIndexController0);
      assertFalse(parentIndexController1.equals((Object)parentIndexController0));
      
      Injector.validateBean(parentIndexController1, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController1.parentScore());
      assertNotSame(parentIndexController1, parentIndexController0);
      assertFalse(parentIndexController1.equals((Object)parentIndexController0));
      
      ParentInfoService parentInfoService2 = parentIndexController1.parentInfoServiceImpl;
      assertSame(parentInfoService2, parentInfoService1);
      assertNotSame(parentInfoService2, parentInfoService0);
      assertFalse(parentInfoService2.equals((Object)parentInfoService0));
      assertNotNull(parentInfoService2);
      
      parentIndexController0.parentInfoServiceImpl = parentInfoService2;
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertEquals("parent/parent-score", parentIndexController1.parentScore());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = parentIndexController0.parentHome(httpServletRequest0, httpServletResponse0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotSame(parentIndexController0, parentIndexController1);
      assertFalse(parentIndexController0.equals((Object)parentIndexController1));
      assertNull(string0);
      
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest1).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentIndexController0.parentInfo(httpServletRequest1, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      assertNotNull(parentIndexController0);
      
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentIndexController0.parentInfo(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn((-2719.0)).when(parent0).getInfoCompleteDegree();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoService0).findParentByMail(anyString());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("UoW<hD%OIC<Er8").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      Model model1 = mock(Model.class, new ViolatedAssumptionAnswer());
      Model model2 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn(model0, model1).when(model2).addAttribute(anyString() , any());
      String string0 = parentIndexController0.parentInfo(httpServletRequest0, model2);
      assertEquals("parent/parent-info", string0);
      
      String string1 = parentIndexController0.parentScore();
      assertEquals("parent/parent-score", string1);
      
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest1).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string2 = parentIndexController0.parentHome(httpServletRequest1, httpServletResponse0);
      assertNull(string2);
      assertEquals("parent/parent-score", parentIndexController0.parentScore());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentIndexController parentIndexController0 = new ParentIndexController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentIndexController0, (Class<?>) ParentIndexController.class, "parentInfoServiceImpl", (Object) parentInfoService0);
      Injector.validateBean(parentIndexController0, (Class<?>) ParentIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      String string0 = parentIndexController0.parentHome(httpServletRequest0, httpServletResponse0);
      assertEquals("parent/parent-home", string0);
      assertNotNull(string0);
  }
}
