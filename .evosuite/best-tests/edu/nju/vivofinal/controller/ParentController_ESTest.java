/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:25:42 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import edu.nju.vivofinal.controller.ParentController;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.service.ParentInfoService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParentController_ESTest extends ParentController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parentInfoService0).disagreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.disagreeApplication((-79L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.applyToJoinClass("edu.nju.vivofinal.controller.ParentController", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parentInfoService0).agreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.agreeApplication((-1258L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.applyToJoinClass("-7[F-s", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.disagreeApplication((-6L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).updateParentInfo(any(edu.nju.vivofinal.model.Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.update((Parent) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      Parent parent0 = parentController0.findParentInfoByMail("9[|5tGK0");
      assertNull(parent0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.agreeApplication((-6L));
      assertFalse(boolean0);
  }
}
