/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:01:40 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.daoimpl.ParentInfoDaoImpl;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.Teacher;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ParentInfoDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).update(any());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.updateParentInfo((Parent) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.saveParentInfo((Parent) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      LinkedList<Parent> linkedList0 = new LinkedList<Parent>();
      Query<Parent> query0 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Parent> query1 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Parent parent0 = new Parent("FVwGAem*/TM3TJs", "", "FVwGAem*/TM3TJs", "FVwGAem*/TM3TJs", "", "FVwGAem*/TM3TJs");
      parent0.setParentId(637L);
      linkedList0.add(parent0);
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent1 = parentInfoDaoImpl0.findParentByStudentId((String) null);
      assertEquals("FVwGAem*/TM3TJs", parent1.getStudentName());
  }





  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      LinkedList<Parent> linkedList0 = new LinkedList<Parent>();
      Query<Parent> query0 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Parent> query1 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Parent parent0 = new Parent("FVwGAem*/TM3TJs", "", "FVwGAem*/TM3TJs", "FVwGAem*/TM3TJs", "", "FVwGAem*/TM3TJs");
      parent0.setParentId(637L);
      linkedList0.add(parent0);
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent1 = parentInfoDaoImpl0.findParentByMail("qV>EELM^'*C");
      assertEquals("", parent1.getStudentId());
  }



  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent0 = parentInfoDaoImpl0.findParentById((-3165L));
      assertNull(parent0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Parent parent0 = new Parent();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      parent0.setParentId(1L);
      Parent parent1 = parentInfoDaoImpl0.findParentById((-1L));
      assertSame(parent1, parent0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Parent parent0 = new Parent();
      parent0.setParentId((-1684L));
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent1 = parentInfoDaoImpl0.findParentById((-1L));
      assertNull(parent1.getParentMail());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Parent parent0 = new Parent();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent1 = parentInfoDaoImpl0.findParentById(0L);
      assertNull(parent1.getParentName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Parent parent0 = new Parent("", "", "", "q^:~", "", "ah*78Wg8^");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent1 = parentInfoDaoImpl0.findParentById((-1L));
      assertEquals(0L, parent1.getParentId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet1 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("", "", "", "rKfB", linkedHashSet0, linkedHashSet1);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      List<Parent> list0 = parentInfoDaoImpl0.findAllParentsByTeacherId(0L);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<String>) null).when(baseDao0).getAllList(any(java.lang.Class.class));
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      List<Parent> list0 = parentInfoDaoImpl0.findAllParents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(2533);
      vector0.add(integer0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(baseDao0).getAllList(any(java.lang.Class.class));
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      List<Parent> list0 = parentInfoDaoImpl0.findAllParents();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).delete(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.deleteParentInfo(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      // Undeclared exception!
      try { 
        parentInfoDaoImpl0.findAllParents();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.ParentInfoDaoImpl", e);
      }
  }




  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Query<Integer> query0 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Integer> query1 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      Parent parent0 = parentInfoDaoImpl0.findParentByMail("q^Y~");
      assertNull(parent0);
  }



  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherById(anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      // Undeclared exception!
      try { 
        parentInfoDaoImpl0.findAllParentsByTeacherId((-563L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).delete(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.deleteParentInfo((-1L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Parent parent0 = new Parent();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.updateParentInfo(parent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      boolean boolean0 = parentInfoDaoImpl0.saveParentInfo((Parent) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      Stack<Object> stack0 = new Stack<Object>();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(baseDao0).getAllList(any(java.lang.Class.class));
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      List<Parent> list0 = parentInfoDaoImpl0.findAllParents();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParentInfoDaoImpl parentInfoDaoImpl0 = new ParentInfoDaoImpl();
      ExampleMatcher.NoOpPropertyValueTransformer exampleMatcher_NoOpPropertyValueTransformer0 = ExampleMatcher.NoOpPropertyValueTransformer.INSTANCE;
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(exampleMatcher_NoOpPropertyValueTransformer0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoDaoImpl0, (Class<?>) ParentInfoDaoImpl.class);
      // Undeclared exception!
      try { 
        parentInfoDaoImpl0.findParentById((-1L));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.data.domain.ExampleMatcher$NoOpPropertyValueTransformer cannot be cast to edu.nju.vivofinal.model.Parent
         //
         verifyException("edu.nju.vivofinal.daoimpl.ParentInfoDaoImpl", e);
      }
  }
}
