/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:23:53 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import edu.nju.vivofinal.VIVOFinalApplication;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.CustomerInfoDaoImpl;
import edu.nju.vivofinal.model.Customer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = VIVOFinalApplication.class)
@Transactional
public class CustomerInfoDaoImplTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      boolean boolean0 = customerInfoDaoImpl0.updateCustomerInfo((Customer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Customer customer0 = new Customer((String) null, (String) null, "", (String) null, "", true);
      vector0.add((Object) customer0);
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0, vector0, (List) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1, query1).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0).when(baseDao0).getSession();
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      customerInfoDaoImpl0.findCustomerInfoByMail("from Customer");
      List<Customer> list0 = customerInfoDaoImpl0.showAllCustomers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      ArrayList<Customer> arrayList0 = new ArrayList<Customer>();
      Query<Customer> query0 = (Query<Customer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(query0).list();
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query<Integer>) null, (Query<Integer>) null, query0).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0, transaction0).when(session0).beginTransaction();
      arrayList0.add((Customer) null);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0, session0).when(baseDao0).getSession();
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      customerInfoDaoImpl0.showAllCustomers();
      customerInfoDaoImpl0.findCustomerInfoByMail("Path must not be null or empty!");
      List<Customer> list0 = customerInfoDaoImpl0.showAllCustomers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      Customer customer0 = new Customer((String) null, (String) null, "", (String) null, "", true);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      boolean boolean0 = customerInfoDaoImpl0.saveCustomerInfo(customer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      ArrayList<Customer> arrayList0 = new ArrayList<Customer>();
      Query<Customer> query0 = (Query<Customer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(query0).list();
      doReturn((Query) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query<Integer>) null, (Query<Integer>) null, query0).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0, transaction0).when(session0).beginTransaction();
      arrayList0.add((Customer) null);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0, session0).when(baseDao0).getSession();
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      customerInfoDaoImpl0.showAllCustomers();
      customerInfoDaoImpl0.findCustomerInfoByMail("Path must not be null or empty!");
      Customer customer0 = customerInfoDaoImpl0.findCustomerInfoByMail("\"1x7f");
      assertNull(customer0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0, vector0).when(query1).list();
      doReturn(query0, query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1, query1, query1).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0, transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0, session0, (Session) null).when(baseDao0).getSession();
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      customerInfoDaoImpl0.findCustomerInfoByMail("from Customer");
      customerInfoDaoImpl0.showAllCustomers();
      customerInfoDaoImpl0.findCustomerInfoByMail("Metric must not be null!");
      List<Customer> list0 = customerInfoDaoImpl0.showAllCustomers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0, vector0).when(query1).list();
      doReturn(query0, query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1, query1, query1).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0, transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0, session0, (Session) null).when(baseDao0).getSession();
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      Customer customer0 = customerInfoDaoImpl0.findCustomerInfoByMail("from Customer");
      customerInfoDaoImpl0.showAllCustomers();
      customerInfoDaoImpl0.findCustomerInfoByMail("Metric must not be null!");
      Customer customer1 = customerInfoDaoImpl0.findCustomerInfoByMail("Metric must not be null!");
      assertNotSame(customer1, customer0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list();
      doReturn((Query) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      doReturn(false).when(baseDao0).update(any());
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      Customer customer0 = customerInfoDaoImpl0.findCustomerInfoByMail("from Customer");
      boolean boolean0 = customerInfoDaoImpl0.updateCustomerInfo(customer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CustomerInfoDaoImpl customerInfoDaoImpl0 = new CustomerInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(customerInfoDaoImpl0, (Class<?>) CustomerInfoDaoImpl.class);
      Customer customer0 = new Customer("org.springframework.data.geo.Metrics", "org.springframework.data.geo.Metrics", "',W#?,P", "',W#?,P", "',W#?,P", true);
      boolean boolean0 = customerInfoDaoImpl0.saveCustomerInfo(customer0);
      assertTrue(boolean0);
  }
}
