/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:58:08 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl;
import edu.nju.vivofinal.model.CommonNotice;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.Teacher;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.geo.Metrics;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class CommonNoticeDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice0 = new CommonNotice();
      boolean boolean0 = commonNoticeDaoImpl0.saveCommonNotice(commonNotice0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      CommonNotice commonNotice0 = new CommonNotice();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice1 = commonNoticeDaoImpl0.findCommonNoticeById(1196L);
      assertNull(commonNotice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      MockDate mockDate0 = new MockDate(0L);
      CommonNotice commonNotice0 = new CommonNotice(mockDate0, (-3343L), "ck(x5y", "45;zS(^Rc9($6T$<");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice1 = commonNoticeDaoImpl0.findCommonNoticeById((-3343L));
      assertEquals(0L, commonNotice1.getCommonNoticeId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      Vector<Integer> vector0 = new Vector<Integer>();
      Query<Integer> query0 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(128);
      vector0.add(integer0);
      Query<Integer> query1 = (Query<Integer>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices(128);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).delete(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      boolean boolean0 = commonNoticeDaoImpl0.deleteCommonNotice(1471L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      Instant instant0 = MockInstant.ofEpochSecond(184L, 184L);
      Date date0 = Date.from(instant0);
      CommonNotice commonNotice0 = new CommonNotice(date0, (-895L), "Method must not be null!", "Method must not be null!");
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.saveCommonNotice(commonNotice0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.findCommonNoticesByParentMail("Method must not be null!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.findCommonNoticeById((-1698L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      CommonNotice commonNotice0 = new CommonNotice((Date) null, 1L, "Nky-c#rxB`$4QR;>ZQ", "");
      Metrics metrics0 = Metrics.KILOMETERS;
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0, metrics0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      commonNoticeDaoImpl0.findCommonNoticeById((-1851L));
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.findCommonNoticeById((-1L));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.springframework.data.geo.Metrics cannot be cast to edu.nju.vivofinal.model.CommonNotice
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      // Undeclared exception!
      try { 
        commonNoticeDaoImpl0.deleteCommonNotice(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.CommonNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByParentMail(anyString());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findCommonNoticesByParentMail("&A}*!");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByParentMail(anyString());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findCommonNoticesByParentMail((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      MockDate mockDate0 = new MockDate(100, 2786, 100, 7086, 7086, 100);
      CommonNotice commonNotice0 = new CommonNotice(mockDate0, 100, "", "");
      Vector<CommonNotice> vector0 = new Vector<CommonNotice>();
      vector0.add(commonNotice0);
      Query<CommonNotice> query0 = (Query<CommonNotice>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<CommonNotice> query1 = (Query<CommonNotice>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0, (List) null).when(query1).list();
      doReturn(query0, query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1, query1).when(session0).createQuery(anyString());
      doReturn(transaction0, transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session0).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      TreeSet<ExamScore> treeSet1 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("", "b+", "b+", "", treeSet0, treeSet1);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByParentMail(anyString());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findCommonNoticesByParentMail("I0p34ZulrI");
      assertTrue(list0.contains(commonNotice0));
      
      List<CommonNotice> list1 = commonNoticeDaoImpl0.findAllCommonNotices(7086);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices((-4522L));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      ArrayList<CommonNotice> arrayList0 = new ArrayList<CommonNotice>();
      Query<CommonNotice> query0 = (Query<CommonNotice>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<CommonNotice> query1 = (Query<CommonNotice>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      List<CommonNotice> list0 = commonNoticeDaoImpl0.findAllCommonNotices(0L);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      boolean boolean0 = commonNoticeDaoImpl0.saveCommonNotice((CommonNotice) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).delete(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      boolean boolean0 = commonNoticeDaoImpl0.deleteCommonNotice((-4522L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommonNoticeDaoImpl commonNoticeDaoImpl0 = new CommonNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(commonNoticeDaoImpl0, (Class<?>) CommonNoticeDaoImpl.class);
      CommonNotice commonNotice0 = commonNoticeDaoImpl0.findCommonNoticeById((-4522L));
      assertNull(commonNotice0);
  }
}
