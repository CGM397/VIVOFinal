/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:16:10 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.Teacher;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Sort;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherInfoDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher0 = new Teacher();
      boolean boolean0 = teacherInfoDaoImpl0.updateTeacherInfo(teacher0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      boolean boolean0 = teacherInfoDaoImpl0.saveTeacherInfo((Teacher) null);
      assertTrue(boolean0);
  }



  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Teacher teacher0 = new Teacher();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, teacher0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findTeacherById(1309L);
      teacherInfoDaoImpl0.findTeacherById(1L);
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherById(1L);
      assertNull(teacher1.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("", "", "%awk%8qd_!B$/<Ca)oO", "", hashSet0, treeSet0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherById(1L);
      assertEquals(0L, teacher1.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Vector<Parent> vector0 = new Vector<Parent>();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parent0).toString();
      vector0.add(parent0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(baseDao0).getAllList(any(java.lang.Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      List<Teacher> list0 = teacherInfoDaoImpl0.findAllTeachers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).delete(any(java.lang.Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      boolean boolean0 = teacherInfoDaoImpl0.deleteTeacherInfo(1820L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.updateTeacherInfo((Teacher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherById(2804L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findAllTeachers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }



  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<String> query1 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher0 = teacherInfoDaoImpl0.findTeacherByMail("4");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(baseDao0).getAllList(any(java.lang.Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      List<Teacher> list0 = teacherInfoDaoImpl0.findAllTeachers();
      assertNull(list0);
  }
}
