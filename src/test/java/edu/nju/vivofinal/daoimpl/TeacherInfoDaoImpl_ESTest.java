/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:45:55 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.Teacher;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Sort;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherInfoDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      boolean boolean0 = teacherInfoDaoImpl0.saveTeacherInfo((Teacher) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Stack<Object> stack0 = new Stack<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack0, stack0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Teacher teacher0 = new Teacher();
      teacher0.setTeacherId((-2471L));
      stack0.add((Object) teacher0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherByMail("StringMatcher must not be null!");
      assertNull(teacher1.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, (List) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Teacher teacher0 = new Teacher();
      vector0.add((Object) teacher0);
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(baseDao0).findById(any(Class.class) , anyLong());
      doReturn(session0).when(baseDao0).getSession();
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.saveTeacherInfo(teacher0);
      teacherInfoDaoImpl0.findTeacherByMail("y+~^o/uVnU!5#$(Clu");
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherById(1L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to edu.nju.vivofinal.model.Teacher
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Object object0 = new Object();
      Stack<Sort.Direction> stack0 = new Stack<Sort.Direction>();
      Stack<Object> stack1 = new Stack<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack1, (List) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Teacher teacher0 = new Teacher();
      teacher0.getParents();
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>((Comparator<? super ExamScore>) null);
      Teacher teacher1 = new Teacher((String) null, (String) null, (String) null, " Did you mean %s?", (Set<Parent>) null, treeSet0);
      stack1.add((Object) teacher1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).delete(any(Class.class) , anyLong());
      doReturn(object0).when(baseDao0).findById(any(Class.class) , anyLong());
      doReturn(stack0).when(baseDao0).getAllList(any(Class.class));
      doReturn(session0).when(baseDao0).getSession();
      doReturn(false, false).when(baseDao0).update(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher2 = new Teacher();
      teacherInfoDaoImpl0.updateTeacherInfo(teacher2);
      teacherInfoDaoImpl0.findTeacherByMail("StringMatcher must not be null!");
      teacherInfoDaoImpl0.deleteTeacherInfo(0L);
      teacherInfoDaoImpl0.updateTeacherInfo((Teacher) null);
      teacherInfoDaoImpl0.findAllTeachers();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherById(0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to edu.nju.vivofinal.model.Teacher
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Teacher teacher0 = new Teacher();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, teacher0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findTeacherById(1309L);
      teacherInfoDaoImpl0.findTeacherById(1L);
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherById(1L);
      assertEquals(0L, teacher1.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      TreeSet<ExamScore> treeSet0 = new TreeSet<ExamScore>();
      Teacher teacher0 = new Teacher("", "", "%awk%8qd_!B$/<Ca)oO", "", hashSet0, treeSet0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherById(1L);
      assertEquals(100.0, teacher1.getInfoCompleteDegree(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Vector<Parent> vector0 = new Vector<Parent>();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parent0).toString();
      vector0.add(parent0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      List<Teacher> list0 = teacherInfoDaoImpl0.findAllTeachers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.updateTeacherInfo((Teacher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.saveTeacherInfo((Teacher) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherById(2804L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findAllTeachers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.deleteTeacherInfo((-3577L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Teacher> linkedList0 = new LinkedList<Teacher>();
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet1 = new LinkedHashSet<ExamScore>();
      Parent parent0 = new Parent();
      parent0.setParentMail("");
      linkedHashSet0.add(parent0);
      Teacher teacher0 = new Teacher("vC|W1<S-|#s0~IrI=BU", "gSD#b$fkrdNgnH=", "gSD#b$fkrdNgnH=", ": ", linkedHashSet0, linkedHashSet1);
      linkedList0.add(teacher0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null, (List<Object>) null, (List<Object>) null, linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherByParentMail("");
      assertEquals(100.0, teacher1.getInfoCompleteDegree(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Teacher> linkedList0 = new LinkedList<Teacher>();
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet1 = new LinkedHashSet<ExamScore>();
      Parent parent0 = new Parent();
      parent0.setParentMail("");
      linkedHashSet0.add(parent0);
      Teacher teacher0 = new Teacher("vC|W1<S-|#s0~IrI=BU", "gSD#b$fkrdNgnH=", "gSD#b$fkrdNgnH=", ": ", linkedHashSet0, linkedHashSet1);
      linkedList0.add(teacher0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null, (List<Object>) null, (List<Object>) null, linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherByParentMail("vC|W1<S-|#s0~IrI=BU");
      assertNull(teacher1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Teacher> linkedList0 = new LinkedList<Teacher>();
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet1 = new LinkedHashSet<ExamScore>();
      Parent parent0 = new Parent();
      linkedHashSet0.add(parent0);
      Teacher teacher0 = new Teacher("vC|W1<S-|#s0~IrI=BU", "gSD#b$fkrdNgnH=", "gSD#b$fkrdNgnH=", ": ", linkedHashSet0, linkedHashSet1);
      linkedList0.add(teacher0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null, (List<Object>) null, (List<Object>) null, linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherByParentMail("vC|W1<S-|#s0~IrI=BU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Teacher> linkedList0 = new LinkedList<Teacher>();
      LinkedHashSet<Parent> linkedHashSet0 = new LinkedHashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet1 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("vC|W1<S-|#s0~IrI=BU", "gSD#b$fkrdNgnH=", "gSD#b$fkrdNgnH=", ": ", linkedHashSet0, linkedHashSet1);
      linkedList0.add(teacher0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null, (List<Object>) null, (List<Object>) null, linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherByParentMail("vC|W1<S-|#s0~IrI=BU");
      assertNull(teacher1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Teacher> linkedList0 = new LinkedList<Teacher>();
      Teacher teacher0 = new Teacher();
      linkedList0.add(teacher0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null, (List<Object>) null, (List<Object>) null, linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      teacherInfoDaoImpl0.findAllTeachers();
      Teacher teacher1 = teacherInfoDaoImpl0.findTeacherByParentMail("vC|W1<S-|#s0~IrI=BU");
      assertNull(teacher1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1));
      linkedList0.add(integer0);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(baseDao0).getAllList(any(Class.class));
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      // Undeclared exception!
      try { 
        teacherInfoDaoImpl0.findTeacherByParentMail("aq*m&");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to edu.nju.vivofinal.model.Teacher
         //
         verifyException("edu.nju.vivofinal.daoimpl.TeacherInfoDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<String> query1 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List<String>) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      Stack<Parent> stack0 = new Stack<Parent>();
      Query<Parent> query2 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Parent> query3 = (Query<Parent>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(query3).list();
      doReturn(query2).when(query3).setParameter(anyInt() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query3).when(session1).createQuery(anyString());
      doReturn(transaction1).when(session1).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session1, (Session) null).when(baseDao0).getSession();
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      teacherInfoDaoImpl0.findTeacherByMail("");
      teacherInfoDaoImpl0.findTeacherByMail("");
      Teacher teacher0 = teacherInfoDaoImpl0.findTeacherByMail("");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      boolean boolean0 = teacherInfoDaoImpl0.updateTeacherInfo((Teacher) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TeacherInfoDaoImpl teacherInfoDaoImpl0 = new TeacherInfoDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).delete(any(Class.class) , anyLong());
      Injector.inject(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(teacherInfoDaoImpl0, (Class<?>) TeacherInfoDaoImpl.class);
      boolean boolean0 = teacherInfoDaoImpl0.deleteTeacherInfo((-1089L));
      assertTrue(boolean0);
  }
}
