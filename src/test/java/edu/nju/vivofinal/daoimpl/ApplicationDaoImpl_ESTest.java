/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:59:36 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.ApplicationDaoImpl;
import edu.nju.vivofinal.model.ParentApplication;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ApplicationDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).update(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication0 = new ParentApplication();
      boolean boolean0 = applicationDaoImpl0.updateApplication(parentApplication0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      boolean boolean0 = applicationDaoImpl0.saveApplication(parentApplication0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication0 = applicationDaoImpl0.findApplicationById((-2377L));
      assertNull(parentApplication0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication("", 1674L, "", "", "", true);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication1 = applicationDaoImpl0.findApplicationById(4004L);
      assertEquals(0L, parentApplication1.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication("org.hibernate.criterion.CriteriaSpecification", (-1L), "org.hibernate.criterion.CriteriaSpecification", (String) null, "", false);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication1 = applicationDaoImpl0.findApplicationById(0L);
      assertSame(parentApplication1, parentApplication0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication1 = applicationDaoImpl0.findApplicationById(179L);
      assertEquals(0L, parentApplication1.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      parentApplication0.setApplicationId(1L);
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication1 = applicationDaoImpl0.findApplicationById(179L);
      assertEquals(1L, parentApplication1.getApplicationId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      parentApplication0.setApplicationId((-1L));
      ParentApplication parentApplication1 = applicationDaoImpl0.findApplicationById(521L);
      assertNull(parentApplication1.getParentName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(baseDao0).getSession();
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      List<ParentApplication> list0 = applicationDaoImpl0.findApplicationsByTeacherMail("ILu8QdIla7z");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      Object object0 = new Object();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list();
      doReturn((Query) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      List<ParentApplication> list0 = applicationDaoImpl0.findApplicationsByTeacherMail("edu.nju.vivofinal.daoimpl.ApplicationDaoImpl");
      assertFalse(list0.contains(parentApplication0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      ParentApplication parentApplication0 = new ParentApplication();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).update(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      boolean boolean0 = applicationDaoImpl0.updateApplication(parentApplication0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      ParentApplication parentApplication0 = new ParentApplication();
      boolean boolean0 = applicationDaoImpl0.saveApplication(parentApplication0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApplicationDaoImpl applicationDaoImpl0 = new ApplicationDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn("0b").when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(applicationDaoImpl0, (Class<?>) ApplicationDaoImpl.class);
      // Undeclared exception!
      try { 
        applicationDaoImpl0.findApplicationById(145L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to edu.nju.vivofinal.model.ParentApplication
         //
         verifyException("edu.nju.vivofinal.daoimpl.ApplicationDaoImpl", e);
      }
  }
}
