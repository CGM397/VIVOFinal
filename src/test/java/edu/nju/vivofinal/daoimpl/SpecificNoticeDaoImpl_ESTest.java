/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:12:57 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl;
import edu.nju.vivofinal.model.SpecificNotice;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class SpecificNoticeDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(baseDao0).save(any());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice0 = new SpecificNotice();
      boolean boolean0 = specificNoticeDaoImpl0.saveSpecificNotice(specificNotice0);
      boolean boolean1 = specificNoticeDaoImpl0.saveSpecificNotice(specificNotice0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice((Date) null, 201L, 201L, "", "");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      specificNotice0.setTeacherId((-1501L));
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById((-521L));
      assertEquals(0L, specificNotice1.getSpecificNoticeId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(0L);
      assertNull(specificNotice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice((Date) null, 533L, 533L, "", "T}D;t");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(0L);
      assertEquals(533L, specificNotice1.getParentId());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice((Date) null, 201L, 201L, "", "");
      specificNotice0.setParentId((-1395L));
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(201L);
      assertEquals("", specificNotice1.getContext());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn("d`#3%").when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      // Undeclared exception!
      try { 
        specificNoticeDaoImpl0.findSpecificNoticeById(0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to edu.nju.vivofinal.model.SpecificNotice
         //
         verifyException("edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl", e);
      }
  }




  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(query0).list();
      doReturn((Query<Object>) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      arrayList0.add(object0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices(633L);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Transaction) null).when(baseDao0).findById(any(java.lang.Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice0 = specificNoticeDaoImpl0.findSpecificNoticeById(633L);
      assertNull(specificNotice0);
  }
}
