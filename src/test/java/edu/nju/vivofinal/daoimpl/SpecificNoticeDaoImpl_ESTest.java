/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:52:28 GMT 2019
 */

package edu.nju.vivofinal.daoimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.BaseDao;
import edu.nju.vivofinal.dao.ParentInfoDao;
import edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.SpecificNotice;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class SpecificNoticeDaoImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(baseDao0).save(any());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      MockDate mockDate0 = new MockDate();
      SpecificNotice specificNotice0 = new SpecificNotice(mockDate0, (-1766L), (-1766L), "pQ^Uk@c;D_(K[a'", "pQ^Uk@c;D_(K[a'");
      boolean boolean0 = specificNoticeDaoImpl0.saveSpecificNotice(specificNotice0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      doReturn("65@i:Y/SZa").when(transaction1).toString();
      vector0.add((Object) transaction1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findSpecificNoticesByParentMail("65@i:Y/SZa");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice0 = specificNoticeDaoImpl0.findSpecificNoticeById(472L);
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(576L);
      assertNull(specificNotice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      SpecificNotice specificNotice0 = new SpecificNotice((Date) null, 1L, 1L, "", "");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(0L);
      assertEquals(1L, specificNotice1.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      SpecificNotice specificNotice0 = new SpecificNotice(date0, (-1L), (-1L), "Handling completed", "Handling completed");
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      SpecificNotice specificNotice1 = specificNoticeDaoImpl0.findSpecificNoticeById(452L);
      assertEquals("Handling completed", specificNotice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, (List<Object>) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      vector0.add((Object) transaction1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices(2524L);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(baseDao0).delete(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      specificNoticeDaoImpl0.deleteSpecificNotice((-3393L));
      boolean boolean0 = specificNoticeDaoImpl0.deleteSpecificNotice(4156L);
      boolean boolean1 = specificNoticeDaoImpl0.deleteSpecificNotice((-38L));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      // Undeclared exception!
      try { 
        specificNoticeDaoImpl0.findSpecificNoticesByParentMail("select s from SpecificNotice s where s.teacherId = ?1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      // Undeclared exception!
      try { 
        specificNoticeDaoImpl0.deleteSpecificNotice(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Stack<Object> stack0 = new Stack<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(query0).list();
      doReturn((Query<Object>) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query<Object>) null).when(session1).createQuery(anyString());
      doReturn(transaction1).when(session1).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session1).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn(335L).when(parent0).getParentId();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices((-3393L));
      List<SpecificNotice> list1 = specificNoticeDaoImpl0.findSpecificNoticesByParentMail("FORCE");
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, (Session) null).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      specificNoticeDaoImpl0.findAllSpecificNotices(2524L);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findSpecificNoticesByParentMail("%R;<H|");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Stack<Object> stack0 = new Stack<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(query0).list();
      doReturn((Query<Object>) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn(335L).when(parent0).getParentId();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findSpecificNoticesByParentMail("FORCE");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      Query<String> query0 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<String> query1 = (Query<String>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, (List) null).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findSpecificNoticesByParentMail("select s rom SpecificNotice s where s.teacherId = ?1");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Stack<Object> stack0 = new Stack<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(query0).list();
      doReturn((Query<Object>) null).when(query0).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query0).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Query<Object>) null).when(session1).createQuery(anyString());
      doReturn(transaction1).when(session1).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0, session1).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices((-3393L));
      List<SpecificNotice> list1 = specificNoticeDaoImpl0.findAllSpecificNotices((-3393L));
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn((Session) null).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices((-1285L));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      Vector<Object> vector0 = new Vector<Object>();
      Query<Object> query0 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      Query<Object> query1 = (Query<Object>) mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(vector0, vector0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyInt() , any());
      Transaction transaction0 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      Transaction transaction1 = mock(Transaction.class, new ViolatedAssumptionAnswer());
      doReturn("%R;<H|").when(transaction1).toString();
      vector0.add((Object) transaction1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn(query1).when(session0).createQuery(anyString());
      doReturn(transaction0).when(session0).beginTransaction();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(session0).when(baseDao0).getSession();
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      List<SpecificNotice> list0 = specificNoticeDaoImpl0.findAllSpecificNotices(2524L);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn("zYnl7").when(baseDao0).findById(any(Class.class) , anyLong());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      // Undeclared exception!
      try { 
        specificNoticeDaoImpl0.findSpecificNoticeById(0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to edu.nju.vivofinal.model.SpecificNotice
         //
         verifyException("edu.nju.vivofinal.daoimpl.SpecificNoticeDaoImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpecificNoticeDaoImpl specificNoticeDaoImpl0 = new SpecificNoticeDaoImpl();
      BaseDao baseDao0 = mock(BaseDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(baseDao0).save(any());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "baseDao", (Object) baseDao0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Injector.validateBean(specificNoticeDaoImpl0, (Class<?>) SpecificNoticeDaoImpl.class);
      boolean boolean0 = specificNoticeDaoImpl0.saveSpecificNotice((SpecificNotice) null);
      assertTrue(boolean0);
  }
}
