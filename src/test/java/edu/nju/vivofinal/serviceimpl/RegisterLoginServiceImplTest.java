/*
 * This file was automatically generated by EvoSuite
 * Sat May 25 16:21:59 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import edu.nju.vivofinal.VIVOFinalApplication;
import junit.framework.TestCase;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.CustomerInfoDao;
import edu.nju.vivofinal.dao.RestaurantInfoDao;
import edu.nju.vivofinal.model.Customer;
import edu.nju.vivofinal.model.Restaurant;
import edu.nju.vivofinal.service.CommonService;
import edu.nju.vivofinal.serviceimpl.RegisterLoginServiceImpl;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = VIVOFinalApplication.class)
public class RegisterLoginServiceImplTest extends TestCase {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(customerInfoDao0).showAllCustomers();
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      // Undeclared exception!
      try { 
        registerLoginServiceImpl0.sendMail("lKVr6Ga");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.RegisterLoginServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("{[(", "").when(commonService0).generateRandomCode(anyInt());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      ArrayList<Customer> arrayList0 = new ArrayList<Customer>();
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0, arrayList0).when(customerInfoDao0).showAllCustomers();
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.sendMail("lKVr6Ga");
      String string1 = registerLoginServiceImpl0.sendMail("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(restaurantInfoDao0).saveRestaurantInfo(any(Restaurant.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.restaurantRegister((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(restaurantInfoDao0).saveRestaurantInfo(any(Restaurant.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.restaurantRegister((String) null, (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("v)kUFMw)fjW!a~:").when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(customerInfoDao0).saveCustomerInfo(any(Customer.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      boolean boolean0 = registerLoginServiceImpl0.customerRegister("not_active", "VIVOFinal : \u90AE\u7BB1\u9A8C\u8BC1", "v6ky(Q@E}k{3W\"iJ=+", "not_active");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Restaurant) null).when(restaurantInfoDao0).findRestaurantInfoById(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u9910\u5385", "org.springframework.http.server.reactive.ReactorHttpHandlerAdapter", "\u9910\u5385");
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.data.dmain.Chunk").when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(restaurantInfoDao0).saveRestaurantInfo(any(Restaurant.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.restaurantRegister("\u987E\u5BA2", "\u9A8C\u8BC1\u7801 : ");
      assertEquals("org.springframework.data.dmain.Chunk", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(restaurantInfoDao0).saveRestaurantInfo(any(Restaurant.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.restaurantRegister("/Z+<u_.Q0/?d@;qY", "I;cL");
      assertEquals("fail", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      LinkedList<Customer> linkedList0 = new LinkedList<Customer>();
      Customer customer0 = new Customer("eU'kY,8jJ]nro", "\u987E\u5BA2", "ivwN8FpI6yE[", ",!6 0$-$y#5E~", "\u987E\u5BA2", true);
      linkedList0.add(customer0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(customerInfoDao0).showAllCustomers();
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.sendMail("\u987E\u5BA2");
      assertEquals("duplicate_mail", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("\u987E\u5BA2").when(commonService0).generateRandomCode(anyInt());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      LinkedList<Customer> linkedList0 = new LinkedList<Customer>();
      Customer customer0 = new Customer("eU'kY,8jJ]nro", "\u987E\u5BA2", "ivwN8FpI6yE[", ",!6 0$-$y#5E~", "\u987E\u5BA2", true);
      linkedList0.add(customer0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(customerInfoDao0).showAllCustomers();
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.sendMail("v{aXJ;?I<vN");
      assertEquals("\u987E\u5BA2", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Restaurant restaurant0 = new Restaurant("v)kUFMw)fjW!a~:", "v)kUFMw)fjW!a~:", "v)kUFMw)fjW!a~:", "v)kUFMw)fjW!a~:");
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(restaurant0).when(restaurantInfoDao0).findRestaurantInfoById(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u9910\u5385", "RbHKl(LHnv", "v)kUFMw)fjW!a~:");
      assertEquals("success", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Restaurant restaurant0 = new Restaurant("Wk={;", ")4/>iD#[5Qf6q", "TF;bVl", "y7t-a#z**qkp[SrneI");
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(restaurant0).when(restaurantInfoDao0).findRestaurantInfoById(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u9910\u5385", "fail", "(>>l@9E>nr");
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      Customer customer0 = new Customer("eU'kY,8jJ]nro", "\u987E\u5BA2", "ivwN8FpI6yE[", ",!6 0$-$y#5E~", "\u987E\u5BA2", true);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(customer0).when(customerInfoDao0).findCustomerInfoByMail(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u987E\u5BA2", "org.springframework.data.dmain.Chunk", "ivwN8FpI6yE[");
      assertEquals("success", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      Customer customer0 = new Customer("eU'kY,8jJ]nro", "\u987E\u5BA2", "ivwN8FpI6yE[", ",!6 0$-$y#5E~", "\u987E\u5BA2", true);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(customer0).when(customerInfoDao0).findCustomerInfoByMail(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u987E\u5BA2", "1i=M/T]", "duplicate_mail");
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      Customer customer0 = new Customer("2U'kY,8jJ]lro", "\u987E\u5BA2", "ivwN8FpI6yE[", ",!6 0$-$y#5E~", "\u987E\u5BA2", false);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(customer0).when(customerInfoDao0).findCustomerInfoByMail(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u987E\u5BA2", "org.springframework.data.dmain.Chunk", "ivwN8FpI6yE[");
      assertEquals("not_active", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      Customer customer0 = new Customer();
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(customer0).when(customerInfoDao0).findCustomerInfoByMail(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u987E\u5BA2", "Uhe_", (String) null);
      assertNotNull(string0);
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("k@{l|L5g%W])EgY~^", "k@{l|L5g%W])EgY~^", "k@{l|L5g%W])EgY~^");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Customer) null).when(customerInfoDao0).findCustomerInfoByMail(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u987E\u5BA2", "\u987E\u5BA2", "[= 2J/RC<Ezb");
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      Restaurant restaurant0 = new Restaurant();
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(restaurant0).when(restaurantInfoDao0).findRestaurantInfoById(anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      String string0 = registerLoginServiceImpl0.login("\u9910\u5385", "T:a", "(auD1hRY=9t)+(-:");
      assertEquals("wrong_password", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegisterLoginServiceImpl registerLoginServiceImpl0 = new RegisterLoginServiceImpl();
      CommonService commonService0 = mock(CommonService.class, new ViolatedAssumptionAnswer());
      doReturn("$VALUES").when(commonService0).generateId(anyInt() , anyString());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "commonService", (Object) commonService0);
      CustomerInfoDao customerInfoDao0 = mock(CustomerInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(customerInfoDao0).saveCustomerInfo(any(Customer.class));
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "customerInfoDao", (Object) customerInfoDao0);
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "mailSender", (Object) javaMailSender0);
      RestaurantInfoDao restaurantInfoDao0 = mock(RestaurantInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class, "restaurantInfoDao", (Object) restaurantInfoDao0);
      Injector.validateBean(registerLoginServiceImpl0, (Class<?>) RegisterLoginServiceImpl.class);
      boolean boolean0 = registerLoginServiceImpl0.customerRegister("QTumsa1oWv_vN'vXL", "", "", "");
      assertTrue(boolean0);
  }
}
