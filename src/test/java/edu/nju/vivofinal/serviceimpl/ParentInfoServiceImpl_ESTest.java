/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:43:37 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.ApplicationDao;
import edu.nju.vivofinal.dao.CommonNoticeDao;
import edu.nju.vivofinal.dao.ParentInfoDao;
import edu.nju.vivofinal.dao.SpecificNoticeDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.model.CommonNotice;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.ParentApplication;
import edu.nju.vivofinal.model.SpecificNotice;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.service.NoticeService;
import edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ParentInfoServiceImpl_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Vector<SpecificNotice> vector0 = new Vector<SpecificNotice>();
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(specificNoticeDao0).findSpecificNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<SpecificNotice> list0 = parentInfoServiceImpl0.showSpecificNotices("bsPCKJRzL=O");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      Stack<SpecificNotice> stack0 = new Stack<SpecificNotice>();
      MockDate mockDate0 = new MockDate();
      SpecificNotice specificNotice0 = new SpecificNotice(mockDate0, 257L, 257L, "1aYM!", "");
      stack0.add(specificNotice0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(specificNoticeDao0).findSpecificNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<SpecificNotice> list0 = parentInfoServiceImpl0.showSpecificNotices("fn!}M?DKP& l|6(6E");
      assertTrue(list0.contains(specificNotice0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((SpecificNotice) null).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      SpecificNotice specificNotice0 = parentInfoServiceImpl0.showOneSpecificNotice(1390L);
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      MockDate mockDate0 = new MockDate(0, 0, 866);
      SpecificNotice specificNotice0 = new SpecificNotice(mockDate0, (-1L), 0L, "", "");
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      SpecificNotice specificNotice1 = parentInfoServiceImpl0.showOneSpecificNotice(1L);
      assertEquals(0L, specificNotice1.getSpecificNoticeId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNotice specificNotice0 = new SpecificNotice();
      specificNotice0.setSpecificNoticeId(1451L);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      SpecificNotice specificNotice1 = parentInfoServiceImpl0.showOneSpecificNotice(2223L);
      assertEquals(1451L, specificNotice1.getSpecificNoticeId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      MockDate mockDate0 = new MockDate(2695, 2695, 0, 2695, 1714, 1714);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNotice specificNotice0 = new SpecificNotice(mockDate0, 1L, 1744L, "", "");
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      SpecificNotice specificNotice1 = parentInfoServiceImpl0.showOneSpecificNotice((-1405L));
      assertEquals("", specificNotice1.getTitle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      MockDate mockDate0 = new MockDate((-1), (-1), (-1));
      SpecificNotice specificNotice0 = new SpecificNotice(mockDate0, 5085L, (-1L), "", "E X");
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(specificNotice0).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      SpecificNotice specificNotice1 = parentInfoServiceImpl0.showOneSpecificNotice(0L);
      assertSame(specificNotice1, specificNotice0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((CommonNotice) null).when(commonNoticeDao0).findCommonNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      CommonNotice commonNotice0 = parentInfoServiceImpl0.showOneCommonNotice((-1L));
      assertNull(commonNotice0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      MockDate mockDate0 = new MockDate(2695, 2695, 0, 2695, 1714, 1714);
      CommonNotice commonNotice0 = new CommonNotice(mockDate0, (-186L), "", "edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl");
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(commonNoticeDao0).findCommonNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      CommonNotice commonNotice1 = parentInfoServiceImpl0.showOneCommonNotice((-1L));
      assertSame(commonNotice1, commonNotice0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      MockDate mockDate0 = new MockDate();
      CommonNotice commonNotice0 = new CommonNotice(mockDate0, 1926L, (String) null, (String) null);
      commonNotice0.setCommonNoticeId(3354L);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(commonNoticeDao0).findCommonNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      CommonNotice commonNotice1 = parentInfoServiceImpl0.showOneCommonNotice(846L);
      assertEquals(1926L, commonNotice1.getTeacherId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNotice commonNotice0 = new CommonNotice();
      commonNotice0.setCommonNoticeId((-1L));
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(commonNoticeDao0).findCommonNoticeById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      CommonNotice commonNotice1 = parentInfoServiceImpl0.showOneCommonNotice((-1074L));
      assertEquals((-1L), commonNotice1.getCommonNoticeId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Stack<CommonNotice> stack0 = new Stack<CommonNotice>();
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(commonNoticeDao0).findCommonNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<CommonNotice> list0 = parentInfoServiceImpl0.showCommonNotices("+9C8wpGS C{2");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      Stack<CommonNotice> stack0 = new Stack<CommonNotice>();
      CommonNotice commonNotice0 = new CommonNotice();
      stack0.add(commonNotice0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(commonNoticeDao0).findCommonNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<CommonNotice> list0 = parentInfoServiceImpl0.showCommonNotices("J'0");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent0 = parentInfoServiceImpl0.findParentByMail("");
      assertNull(parent0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("Reference value must not be null!", "Reference value must not be null!", "rEDz!bP[P#$-`(j<", "J8~`?_ceM nq", (String) null, "``Xh?^v");
      parent0.setParentId(1L);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("org.springframework.data.domain.Sort");
      assertEquals(1L, parent1.getParentId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("", "", "", "\u8001\u5E08\u63A5\u53D7\u4E86\u60A8\u52A0\u5165\u73ED\u7EA7\u7684\u7533\u8BF7\u3002", "edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", "edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl");
      parent0.setParentId((-717L));
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("");
      assertEquals("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", parent1.getStudentName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = parentInfoServiceImpl0.findParentByMail("Y.Epy-c1ep");
      assertNull(parent1.getParentPassword());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<Parent>) null).when(parentInfoDao0).findAllParents();
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.updateParentInfo(parent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.showOneCommonNotice((-2187L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn((ParentApplication) null).when(applicationDao0).findApplicationById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.disagreeApplication(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.applyToJoinClass("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn((ParentApplication) null).when(applicationDao0).findApplicationById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      // Undeclared exception!
      try { 
        parentInfoServiceImpl0.agreeApplication(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.ParentInfoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("", 62L, "", "=mj", "", false);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0, parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(false, true).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("=mj", "=mj", "=mj", "p(^", "", "]");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("Method most not be null!", "", "]", "=mj", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0, teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(62L);
      assertTrue(boolean0);
      
      boolean boolean1 = parentInfoServiceImpl0.disagreeApplication(62L);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("'", 62L, "'", "=mj", "=mj", false);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0, parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(false, true).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("=mj", "=mj", (String) null, "p(^", "=mj", "=mj");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("p(^", "'", "p(^", "=mj", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0, teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(62L);
      boolean boolean1 = parentInfoServiceImpl0.disagreeApplication((-406L));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("'", 62L, "'", "=mj", "'", false);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(false).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("Method most not be null!", "'", "p(^", "=mj", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.disagreeApplication((-406L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("+2?S6LS-.4", "+2?S6LS-.4", "+2?S6LS-.4", (String) null, (String) null, (String) null);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet0 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("``Xh?^v", "+2?S6LS-.4", "+2?S6LS-.4", "+2?S6LS-.4", treeSet0, linkedHashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("``Xh?^v", "``Xh?^v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(applicationDao0).saveApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("", "", "", "", "?vAMMH4BB5", "Page index must not be less than zero!");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      HashSet<Parent> hashSet0 = new HashSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet0 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("`AD7&HSc!c", (String) null, "9.cZ#`;<Z?4#X/", "9.cZ#`;<Z?4#X/", hashSet0, linkedHashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("", "Order specifier must not be null!");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("/#]Eak.39,C:;Ld=#u", "/#]Eak.39,C:;Ld=#u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("\u52A0\u5165\u73ED\u7EA7\u7533\u8BF7\u7ED3\u679C", "\u52A0\u5165\u73ED\u7EA7\u7533\u8BF7\u7ED3\u679C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("=mj", "=mj", (String) null, "p(^", "=mj", "=mj");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("p(^", "'", "p(^", "=mj", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("'", "'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.applyToJoinClass("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("'", 62L, "'", "=mj", "'", false);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0, parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(false, false).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("=mj", "", (String) null, "p(^", "'", "]");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0, parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("Method most not be null!", "'", "p(^", "=mj", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0, teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication(62L);
      boolean boolean1 = parentInfoServiceImpl0.agreeApplication((-1546L));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("Reference value must not be null!", (-1L), "", "", "sR.tDYk;", true);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("sR.tDYk;", "?at`{n|", "", "?at`{n|", "", "?at`{n|");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      teacher0.setTeacherPassword("Reference value must not be null!");
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      doReturn(false).when(teacherInfoDao0).updateTeacherInfo(any(Teacher.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ParentApplication parentApplication0 = new ParentApplication("Reference value must not be null!", (-1L), "", "", "sR.tDYk;", true);
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn(parentApplication0).when(applicationDao0).findApplicationById(anyLong());
      doReturn(true).when(applicationDao0).updateApplication(any(ParentApplication.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Parent parent0 = new Parent("sR.tDYk;", "?at`{n|", "", "?at`{n|", "", "?at`{n|");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentById(anyLong());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = new Teacher();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.agreeApplication((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Stack<Parent> stack0 = new Stack<Parent>();
      Parent parent0 = new Parent("", "\u8001\u5E08\u62D2\u7EDD\u4E86\u60A8\u52A0\u5165\u73ED\u7EA7\u7684\u7533\u8BF7\u3002", "\u8001\u5E08\u62D2\u7EDD\u4E86\u60A8\u52A0\u5165\u73ED\u7EA7\u7684\u7533\u8BF7\u3002", "\u8001\u5E08\u62D2\u7EDD\u4E86\u60A8\u52A0\u5165\u73ED\u7EA7\u7684\u7533\u8BF7\u3002", "``Xh^", "[Ki)/l ");
      stack0.add(parent0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(parentInfoDao0).findAllParents();
      doReturn(true).when(parentInfoDao0).updateParentInfo(any(Parent.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      Parent parent1 = new Parent("-=z", "Mg", "``Xh^", "", "[Ki)/l ", "");
      boolean boolean0 = parentInfoServiceImpl0.updateParentInfo(parent1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Stack<Parent> stack0 = new Stack<Parent>();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      Parent parent1 = new Parent("", "", "", "", (String) null, (String) null);
      stack0.add(parent1);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(parentInfoDao0).findAllParents();
      doReturn(true).when(parentInfoDao0).updateParentInfo(any(Parent.class));
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.updateParentInfo(parent0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      Stack<Parent> stack0 = new Stack<Parent>();
      Parent parent0 = new Parent("sR.tDYk;", "?at`{n|", "", "?at`{n|", "", "?at`{n|");
      stack0.add(parent0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(parentInfoDao0).findAllParents();
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      boolean boolean0 = parentInfoServiceImpl0.updateParentInfo(parent0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((List<CommonNotice>) null).when(commonNoticeDao0).findCommonNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<CommonNotice> list0 = parentInfoServiceImpl0.showCommonNotices("J'0");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParentInfoServiceImpl parentInfoServiceImpl0 = new ParentInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "noticeService", (Object) noticeService0);
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(specificNoticeDao0).findSpecificNoticesByParentMail(anyString());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(parentInfoServiceImpl0, (Class<?>) ParentInfoServiceImpl.class);
      List<SpecificNotice> list0 = parentInfoServiceImpl0.showSpecificNotices("-=z");
      assertNull(list0);
  }
}
