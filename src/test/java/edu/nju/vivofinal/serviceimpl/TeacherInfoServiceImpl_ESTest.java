/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 06:04:45 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import edu.nju.vivofinal.dao.ApplicationDao;
import edu.nju.vivofinal.dao.CommonNoticeDao;
import edu.nju.vivofinal.dao.SpecificNoticeDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.model.CommonNotice;
import edu.nju.vivofinal.model.ParentApplication;
import edu.nju.vivofinal.model.SpecificNotice;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.serviceimpl.TeacherInfoServiceImpl;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherInfoServiceImpl_ESTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(commonNoticeDao0).findAllCommonNotices(anyLong());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      List<CommonNotice> list0 = teacherInfoServiceImpl0.showAllCommonNotices(638L);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationDao0).findApplicationsByTeacherMail(anyString());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      List<ParentApplication> list0 = teacherInfoServiceImpl0.showAllApplications("?V");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      Teacher teacher0 = teacherInfoServiceImpl0.findTeacherInfoByMail("O:?9j7f'z<2n;-");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoDao0).findTeacherByParentMail(anyString());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      Teacher teacher0 = teacherInfoServiceImpl0.findTeacherByParentMail("#:hgZQ`Tm");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((SpecificNotice) null).when(specificNoticeDao0).findSpecificNoticeById(anyLong());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      SpecificNotice specificNotice0 = teacherInfoServiceImpl0.showOneSpecificNotice(3716L);
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((CommonNotice) null).when(commonNoticeDao0).findCommonNoticeById(anyLong());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      CommonNotice commonNotice0 = teacherInfoServiceImpl0.showOneCommonNotice(3716L);
      assertNull(commonNotice0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn("ES").when(teacher0).toString();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByParentMail(anyString());
      doReturn(true).when(teacherInfoDao0).updateTeacherInfo(any(Teacher.class));
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      Teacher teacher1 = teacherInfoServiceImpl0.findTeacherByParentMail("ES");
      teacherInfoServiceImpl0.updateTeacherInfo(teacher1);
      assertNull(teacher1.getTeacherName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TeacherInfoServiceImpl teacherInfoServiceImpl0 = new TeacherInfoServiceImpl();
      ApplicationDao applicationDao0 = mock(ApplicationDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "applicationDao", (Object) applicationDao0);
      CommonNoticeDao commonNoticeDao0 = mock(CommonNoticeDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "commonNoticeDao", (Object) commonNoticeDao0);
      SpecificNoticeDao specificNoticeDao0 = mock(SpecificNoticeDao.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(specificNoticeDao0).findAllSpecificNotices(anyLong());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "specificNoticeDao", (Object) specificNoticeDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      Injector.validateBean(teacherInfoServiceImpl0, (Class<?>) TeacherInfoServiceImpl.class);
      List<SpecificNotice> list0 = teacherInfoServiceImpl0.showAllSpecificNotices(3716L);
      assertNull(list0);
  }
}
