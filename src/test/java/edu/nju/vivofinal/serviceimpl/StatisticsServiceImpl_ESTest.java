/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 05:54:28 GMT 2019
 */

package edu.nju.vivofinal.serviceimpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.dao.ParentInfoDao;
import edu.nju.vivofinal.dao.TeacherInfoDao;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.ScoreItem;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.service.TeacherInfoService;
import edu.nju.vivofinal.serviceimpl.StatisticsServiceImpl;
import edu.nju.vivofinal.statistics.AverageScore;
import edu.nju.vivofinal.statistics.StudentScore;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class StatisticsServiceImpl_ESTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("Handler map must not be empty", "Handler map must not be empty", "", "Handler map must not be empty", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem("kW^)80}0clDZ", (-1.0));
      stack0.add(scoreItem0);
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      hashSet0.add(examScore0);
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      AverageScore averageScore0 = statisticsServiceImpl0.showAverageScores("+-\"[kN^r<");
      assertNotNull(averageScore0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(hashSet0).when(teacher0).getExamScores();
      MockDate mockDate0 = new MockDate((-811), (-811), (-811), (-811), 32);
      LinkedList<ScoreItem> linkedList0 = new LinkedList<ScoreItem>();
      ExamScore examScore0 = new ExamScore("Y~zypZI+RYG0ZX^", mockDate0, linkedList0);
      hashSet0.add(examScore0);
      MockDate mockDate1 = new MockDate();
      ExamScore examScore1 = new ExamScore();
      ExamScore examScore2 = new ExamScore("vSh;", mockDate1, (List<ScoreItem>) null);
      examScore2.setExamTime(mockDate0);
      examScore1.setExamTime(mockDate1);
      hashSet0.add(examScore2);
      hashSet0.add(examScore1);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      // Undeclared exception!
      try { 
        statisticsServiceImpl0.showAverageScores("vSh;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.StatisticsServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(hashSet0).when(teacher0).getExamScores();
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0, (Teacher) null).when(teacherInfoDao0).findTeacherByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      statisticsServiceImpl0.showAverageScores("vSh;");
      // Undeclared exception!
      try { 
        statisticsServiceImpl0.showAverageScores("Y~zypZI+RYG0ZX^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.StatisticsServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      Parent parent0 = new Parent("(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("(m4<MNn=t{?]", "(m4<MNn=t{?]", "", "(m4<MNn=t{?]", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem("(m4<MNn=t{?]", (-0.49355291757194575));
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      hashSet0.add(examScore0);
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      StudentScore studentScore0 = statisticsServiceImpl0.showStudentScores("");
      assertNotNull(studentScore0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      Parent parent0 = new Parent("(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      LinkedHashSet<ExamScore> linkedHashSet0 = new LinkedHashSet<ExamScore>();
      Teacher teacher0 = new Teacher("(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]", "(m4<aN5=t{?]", treeSet0, linkedHashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      ExamScore examScore0 = new ExamScore();
      Stack<ScoreItem> stack0 = new Stack<ScoreItem>();
      ScoreItem scoreItem0 = new ScoreItem("kW^)P80}0clDD", (-1.0));
      stack0.add(scoreItem0);
      examScore0.setItems(stack0);
      linkedHashSet0.add(examScore0);
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      StudentScore studentScore0 = statisticsServiceImpl0.showStudentScores("(m4<aN5=t{?]");
      assertNotNull(studentScore0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      Parent parent0 = new Parent("(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]", "(m4<MNn=t{?]");
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TreeSet<Parent> treeSet0 = new TreeSet<Parent>();
      HashSet<ExamScore> hashSet0 = new HashSet<ExamScore>();
      Teacher teacher0 = new Teacher("(m4<MNn=t{?]", "(m4<MNn=t{?]", "", "(m4<MNn=t{?]", treeSet0, hashSet0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      ExamScore examScore0 = new ExamScore();
      hashSet0.add(examScore0);
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      // Undeclared exception!
      try { 
        statisticsServiceImpl0.showStudentScores("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.serviceimpl.StatisticsServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StatisticsServiceImpl statisticsServiceImpl0 = new StatisticsServiceImpl();
      Parent parent0 = new Parent();
      ParentInfoDao parentInfoDao0 = mock(ParentInfoDao.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoDao0).findParentByMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "parentInfoDao", (Object) parentInfoDao0);
      TeacherInfoDao teacherInfoDao0 = mock(TeacherInfoDao.class, new ViolatedAssumptionAnswer());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoDao", (Object) teacherInfoDao0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(statisticsServiceImpl0, (Class<?>) StatisticsServiceImpl.class);
      StudentScore studentScore0 = statisticsServiceImpl0.showStudentScores("");
      assertNotNull(studentScore0);
  }
}
