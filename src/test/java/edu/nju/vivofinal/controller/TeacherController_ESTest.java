/*
 * This file was automatically generated by EvoSuite
 * Sun May 26 17:24:44 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.controller.TeacherController;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.service.NoticeService;
import edu.nju.vivofinal.service.TeacherInfoService;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherController_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendSomeSpecificNotices(anyLong() , anyList() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendSomeSpecificNotices(0L, (List<Long>) null, "", "9rBzcFvA#tv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendOneSpecificNotice((-3354L), (-1L), "[{uOvp/MgpE[C?gX~<", "`j$Rhtp5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendCommonNotice(anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendCommonNotice(2021L, "4\"Fv=z]kvg).lB", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendExamScore(anyLong() , any(edu.nju.vivofinal.model.ExamScore.class));
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("c]WZW*%@@Y").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendExamScore(examScore0, httpServletRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendExamScore(anyLong() , any(edu.nju.vivofinal.model.ExamScore.class));
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("c]WZW*%@@Y").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendExamScore(examScore0, httpServletRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendCommonNotice(anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendCommonNotice((-622L), "c]WZW*%@@Y", "c]WZW*%@@Y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher0 = teacherController0.findTeacherInfoByMail("");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher0 = teacherController0.findTeacherByParentMail("zscr-PxIskp");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendExamScore(examScore0, httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherController0.findTeacherByParentMail("/67*~`o469");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendOneSpecificNotice(1L, 1L, "2[P*d&6CVK )Zlo)", ">[Mx>v97*W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn("email").when(teacher0).toString();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher1 = teacherController0.findTeacherInfoByMail("Kz7T6h~c$");
      teacherController0.update(teacher1);
      assertNull(teacher1.getTeacherPassword());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn("email").when(teacher0).toString();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher1 = teacherController0.findTeacherInfoByMail("Kz7T6h~c$");
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacher1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendExamScore(examScore0, httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.model.Teacher$MockitoMock$1128317519 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }
}
