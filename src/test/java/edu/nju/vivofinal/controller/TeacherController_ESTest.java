/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 06:03:55 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.controller.TeacherController;
import edu.nju.vivofinal.model.CommonNotice;
import edu.nju.vivofinal.model.ExamScore;
import edu.nju.vivofinal.model.SpecificNotice;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.service.NoticeService;
import edu.nju.vivofinal.service.StatisticsService;
import edu.nju.vivofinal.service.TeacherInfoService;
import edu.nju.vivofinal.statistics.AverageScore;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherController_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendOneSpecificNotice(1326L, (-2452L), "* bVf", "* bVf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      doReturn((AverageScore) null).when(statisticsService0).showAverageScores(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      AverageScore averageScore0 = teacherController0.showAverageScores(httpServletRequest0);
      assertNull(averageScore0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      AverageScore averageScore0 = mock(AverageScore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(averageScore0).toString();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      doReturn(averageScore0).when(statisticsService0).showAverageScores(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      AverageScore averageScore1 = teacherController0.showAverageScores(httpServletRequest0);
      assertSame(averageScore1, averageScore0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendOneSpecificNotice(137L, 137L, "\u0002{f/6YvLI|s", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendExamScore(anyLong() , any(ExamScore.class));
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("TRACE").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendExamScore(examScore0, httpServletRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendCommonNotice(anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((-1736L)).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("v, 'V?G`{/").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendCommonNotice("v, 'V?G`{/", "90FG><5+", httpServletRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendCommonNotice(anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("GmT").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendCommonNotice("GmT", ":?YX>)zX'iI", httpServletRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(teacher0).getTeacherName();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      String string0 = teacherController0.findNameByMail("GmT");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn("").when(teacher0).getTeacherName();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      String string0 = teacherController0.findNameByMail("el:c19QH?^GOp>&'");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      // Undeclared exception!
      try { 
        teacherController0.showOneSpecificNotice(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      CommonNotice commonNotice0 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      doReturn("-TbKlt").when(commonNotice0).toString();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice0).when(teacherInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      CommonNotice commonNotice1 = teacherController0.showOneCommonNotice((-2013L));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.showAverageScores(httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.model.CommonNotice$MockitoMock$699370019 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendExamScore(examScore0, httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn("").when(teacher0).toString();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher1 = teacherController0.findTeacherInfoByMail("\u65E0");
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacher1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendExamScore(examScore0, httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.model.Teacher$MockitoMock$1399105736 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacherController0).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendCommonNotice("v, 'V?G`{/", "90FG><5+", httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.controller.TeacherController cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      String string0 = teacherController0.findNameByMail("\u65E0");
      assertEquals("\u65E0", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(teacherInfoService0).showAllSpecificNotices(anyLong());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      List<SpecificNotice> list0 = teacherController0.showAllSpecificNotices(9L);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.showAverageScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendExamScore(anyLong() , any(ExamScore.class));
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(teacher0).getTeacherId();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      ExamScore examScore0 = mock(ExamScore.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("TRACE").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      boolean boolean0 = teacherController0.sendExamScore(examScore0, httpServletRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(noticeService0).sendSomeSpecificNotices(anyLong() , anyList() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendSomeSpecificNotices(0L, (List<Long>) null, "/bIO0", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher0 = teacherController0.findTeacherInfoByMail("edu.nju.vivofinal.statistics.StudentScore");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(teacherInfoService0).showAllCommonNotices(anyLong());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      List<CommonNotice> list0 = teacherController0.showAllCommonNotices((-689L));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(noticeService0).sendOneSpecificNotice(anyLong() , anyLong() , anyString() , anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      boolean boolean0 = teacherController0.sendOneSpecificNotice(137L, 137L, "\u0002{f/6YvLI|s", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Teacher) null).when(teacherInfoService0).findTeacherByParentMail(anyString());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      Teacher teacher0 = teacherController0.findTeacherByParentMail("HEAD");
      assertNull(teacher0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((SpecificNotice) null).when(teacherInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      SpecificNotice specificNotice0 = teacherController0.showOneSpecificNotice((-689L));
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((CommonNotice) null).when(teacherInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      CommonNotice commonNotice0 = teacherController0.showOneCommonNotice(0L);
      assertNull(commonNotice0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      teacherController0.update((Teacher) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TeacherController teacherController0 = new TeacherController();
      NoticeService noticeService0 = mock(NoticeService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "noticeService", (Object) noticeService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherController0, (Class<?>) TeacherController.class, "teacherInfoService", (Object) teacherInfoService0);
      Injector.validateBean(teacherController0, (Class<?>) TeacherController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        teacherController0.sendCommonNotice("V3\"o", "", httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherController", e);
      }
  }
}
