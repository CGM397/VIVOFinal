/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 06:02:52 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.controller.TeacherIndexController;
import edu.nju.vivofinal.model.Teacher;
import edu.nju.vivofinal.service.StatisticsService;
import edu.nju.vivofinal.service.TeacherInfoService;
import java.util.List;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.ui.Model;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TeacherIndexController_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(teacher0).getInfoCompleteDegree();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("CHVV\"Jz F=V").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      Model model1 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn(model0, (Model) null).when(model1).addAttribute(anyString() , any());
      String string0 = teacherIndexController0.teacherInfo(httpServletRequest0, model1);
      assertEquals("teacher/teacher-info", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(teacher0).getParents();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn((Model) null).when(model0).addAttribute(anyString() , any());
      String string0 = teacherIndexController0.teacherCommonNotice(httpServletRequest0, model0);
      assertEquals("teacher/teacher-commonNotice", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherStudents(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      StatisticsService statisticsService1 = teacherIndexController0.statisticsService;
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsService1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherStudents(httpServletRequest0, model0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.service.StatisticsService$MockitoMock$521221234 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherScoreNotice(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      TeacherInfoService teacherInfoService1 = teacherIndexController0.teacherInfoServiceImpl;
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacherInfoService1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherScoreNotice(httpServletRequest0, model0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.service.TeacherInfoService$MockitoMock$889303591 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacherIndexController0.teacherInfoServiceImpl).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherInfo(httpServletRequest0, model0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.service.TeacherInfoService$MockitoMock$889303591 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherHome(httpServletRequest0, (HttpServletResponse) null, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(teacherIndexController0.statisticsService).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherCommonNotice(httpServletRequest0, model0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.service.StatisticsService$MockitoMock$521221234 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      String string0 = teacherIndexController0.teacherHome(httpServletRequest0, httpServletResponse0, model0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      String string0 = teacherIndexController0.teacherHome(httpServletRequest0, httpServletResponse0, model0);
      assertEquals("teacher/teacher-home", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherInfo(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      Teacher teacher0 = mock(Teacher.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(teacher0).getParents();
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(teacher0).when(teacherInfoService0).findTeacherInfoByMail(anyString());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("teacher/teacher-home").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn((Model) null).when(model0).addAttribute(anyString() , any());
      String string0 = teacherIndexController0.teacherStudents(httpServletRequest0, model0);
      assertEquals("teacher/teacher-students", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        teacherIndexController0.teacherCommonNotice(httpServletRequest0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.TeacherIndexController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(teacherInfoService0).showAllApplications(anyString());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      Model model1 = mock(Model.class, new ViolatedAssumptionAnswer());
      doReturn(model0).when(model1).addAttribute(anyString() , any());
      String string0 = teacherIndexController0.teacherScoreNotice(httpServletRequest0, model1);
      assertEquals("teacher/teacher-approve", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      String string0 = teacherIndexController0.teacherScoreNotice();
      assertEquals("teacher/teacher-scoreNotice", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TeacherIndexController teacherIndexController0 = new TeacherIndexController();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "statisticsService", (Object) statisticsService0);
      TeacherInfoService teacherInfoService0 = mock(TeacherInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(teacherIndexController0, (Class<?>) TeacherIndexController.class, "teacherInfoServiceImpl", (Object) teacherInfoService0);
      Injector.validateBean(teacherIndexController0, (Class<?>) TeacherIndexController.class);
      String string0 = teacherIndexController0.teacherStatistics();
      assertEquals("teacher/teacher-statistics", string0);
  }
}
