/*
 * This file was automatically generated by EvoSuite
 * Mon May 27 06:08:25 GMT 2019
 */

package edu.nju.vivofinal.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.nju.vivofinal.controller.ParentController;
import edu.nju.vivofinal.model.CommonNotice;
import edu.nju.vivofinal.model.Parent;
import edu.nju.vivofinal.model.SpecificNotice;
import edu.nju.vivofinal.service.ParentInfoService;
import edu.nju.vivofinal.service.StatisticsService;
import edu.nju.vivofinal.statistics.StudentScore;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class ParentController_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      CommonNotice commonNotice0 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((CommonNotice) null, (CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn((List) null).when(parentInfoService0).showSpecificNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      String string0 = "";
      parentController0.showCommonNotices("");
      parentController0.disagreeApplication((-1396L));
      parentController0.disagreeApplication(2632L);
      parentController0.showOneCommonNotice(1L);
      parentController0.showSpecificNotices("pGh4+B!8LU?'S8CBS");
      parentController0.disagreeApplication(0L);
      long long0 = 2250L;
      parentController0.showOneCommonNotice(2250L);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StudentScore studentScore0 = mock(StudentScore.class, new ViolatedAssumptionAnswer());
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(parentController0).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.controller.ParentController cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn("email").when(parent0).toString();
      CommonNotice commonNotice0 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      doReturn("email").when(commonNotice0).toString();
      SpecificNotice specificNotice0 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn("").when(specificNotice0).toString();
      CommonNotice commonNotice1 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(commonNotice1).toString();
      SpecificNotice specificNotice1 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(specificNotice1).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(true).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      doReturn(false, true).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn(parent0, parent0).when(parentInfoService0).findParentByMail(anyString());
      doReturn(commonNotice0, commonNotice1).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn(specificNotice0, specificNotice1).when(parentInfoService0).showOneSpecificNotice(anyLong());
      doReturn(false, true).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.disagreeApplication((-2705L));
      parentController0.findParentInfoByMail((String) null);
      parentController0.update((Parent) null);
      parentController0.findParentInfoByMail("&97yOcfiz");
      parentController0.showOneSpecificNotice((-1L));
      parentController0.showOneCommonNotice((-1L));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("email").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.applyToJoinClass("y+", httpServletRequest0);
      parentController0.disagreeApplication((-1628L));
      parentController0.agreeApplication((-1L));
      parentController0.showOneSpecificNotice((-1L));
      parentController0.showOneCommonNotice((-1628L));
      boolean boolean1 = parentController0.update((Parent) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showCommonNotices("nKQ\"^Q>V,s\"");
      ParentController parentController1 = new ParentController();
      ParentInfoService parentInfoService1 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        parentController1.findParentInfoByMail("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((Parent) null, (Parent) null, (Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((List) null, (List) null).when(parentInfoService0).showCommonNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showCommonNotices("");
      parentController0.disagreeApplication(1084L);
      parentController0.findParentInfoByMail("edu.nju.vivofinal.model.SpecificNotice");
      parentController0.findParentInfoByMail("i|`B11QYb?> ");
      parentController0.agreeApplication(487L);
      parentController0.findParentInfoByMail(":DrEpDJk.DEoZWdld");
      parentController0.agreeApplication((-1L));
      parentController0.showCommonNotices("edu.nju.vivofinal.model.SpecificNotice");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      SpecificNotice specificNotice0 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn("w2g*(6*0").when(specificNotice0).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn(specificNotice0).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StudentScore studentScore0 = mock(StudentScore.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(studentScore0).toString();
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      doReturn(studentScore0).when(statisticsService0).showStudentScores(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.disagreeApplication((-528L));
      parentController0.agreeApplication((-1L));
      parentController0.showOneSpecificNotice((-401L));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn("w2g*(6*0").when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.showStudentScores(httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest1).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.applyToJoinClass("w2g*(6*0", httpServletRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      SpecificNotice specificNotice0 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn("edu.nju.vivofinal.controller.ParentController").when(specificNotice0).toString();
      CommonNotice commonNotice0 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(commonNotice0).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn(commonNotice0).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn(specificNotice0).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.disagreeApplication(0L);
      parentController0.showOneSpecificNotice(0L);
      CommonNotice commonNotice1 = parentController0.showOneCommonNotice(0L);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(commonNotice1).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.applyToJoinClass("bzwpJ:p_H].|g", httpServletRequest0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // edu.nju.vivofinal.model.CommonNotice$MockitoMock$1220365934 cannot be cast to java.lang.String
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((CommonNotice) null, (CommonNotice) null, (CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn((List) null).when(parentInfoService0).showSpecificNotices(anyString());
      doReturn(false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showCommonNotices("edu.nju.vivofinal.controller.ParentController");
      parentController0.showOneCommonNotice((-1L));
      parentController0.showOneCommonNotice((-2520L));
      parentController0.showSpecificNotices("$VALUES");
      long long0 = (-1L);
      parentController0.agreeApplication((-1L));
      parentController0.findParentInfoByMail("$VALUES");
      parentController0.update((Parent) null);
      long long1 = 3L;
      parentController0.showOneCommonNotice(3L);
      HttpServletRequest httpServletRequest0 = null;
      // Undeclared exception!
      try { 
        parentController0.showStudentScores((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((Parent) null, (Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((List) null, (List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((CommonNotice) null, (CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn((SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      doReturn((List) null, (List) null).when(parentInfoService0).showSpecificNotices(anyString());
      doReturn(false, false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showOneSpecificNotice(0L);
      parentController0.disagreeApplication(1258L);
      parentController0.findParentInfoByMail("DELETE");
      parentController0.update((Parent) null);
      parentController0.findParentInfoByMail("");
      parentController0.showOneCommonNotice(0L);
      parentController0.showSpecificNotices("DELETE");
      parentController0.showCommonNotices("DELETE");
      long long0 = (-113L);
      parentController0.showOneCommonNotice((-113L));
      parentController0.update((Parent) null);
      parentController0.showSpecificNotices("");
      parentController0.agreeApplication((-1L));
      parentController0.showCommonNotices(" |R5]Vnnd@R2~cT");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((List) null).when(parentInfoService0).showSpecificNotices(anyString());
      doReturn(false, false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.findParentInfoByMail("HEAD");
      parentController0.update((Parent) null);
      parentController0.update((Parent) null);
      List<SpecificNotice> list0 = parentController0.showSpecificNotices("HEAD");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn((SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      doReturn(false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.findParentInfoByMail("Sy~,WL/#");
      parentController0.update((Parent) null);
      parentController0.showOneCommonNotice(0L);
      parentController0.showOneSpecificNotice(1879L);
      parentController0.agreeApplication(0L);
      parentController0.agreeApplication(0L);
      List<CommonNotice> list0 = parentController0.showCommonNotices("H");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      SpecificNotice specificNotice0 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(specificNotice0).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(specificNotice0).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      doReturn((StudentScore) null).when(statisticsService0).showStudentScores(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.agreeApplication((-1L));
      parentController0.showOneSpecificNotice((-401L));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      StudentScore studentScore0 = parentController0.showStudentScores(httpServletRequest0);
      assertNull(studentScore0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((CommonNotice) null, (CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showOneCommonNotice((-722L));
      parentController0.showOneCommonNotice((-1902L));
      parentController0.disagreeApplication((-1223L));
      boolean boolean0 = parentController0.disagreeApplication(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(false).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      doReturn((CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showOneCommonNotice(0L);
      parentController0.agreeApplication(2047L);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.applyToJoinClass("QW3", httpServletRequest0);
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest1).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.applyToJoinClass("YX:YDHhE", httpServletRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parent0).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(parent0).when(parentInfoService0).findParentByMail(anyString());
      doReturn(true).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      Parent parent1 = parentController0.findParentInfoByMail("2EUB$#3\"?(*tXN");
      boolean boolean0 = parentController0.update(parent1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.applyToJoinClass("6$uX?Q\"3^W-NBh", httpServletRequest0);
      parentController0.showCommonNotices("WOiFD|$Bty`");
      parentController0.showOneCommonNotice(0L);
      parentController0.disagreeApplication((-955L));
      HttpServletRequest httpServletRequest1 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest1).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn((SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.agreeApplication(0L);
      SpecificNotice specificNotice0 = parentController0.showOneSpecificNotice((-1L));
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      SpecificNotice specificNotice0 = parentController0.showOneSpecificNotice(95L);
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn((Parent) null, (Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn((CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn((List) null, (List) null, (List) null).when(parentInfoService0).showSpecificNotices(anyString());
      doReturn(false, false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.findParentInfoByMail(";;)w$$");
      parentController0.update((Parent) null);
      parentController0.showSpecificNotices("pEnOL:##{52j>R");
      parentController0.disagreeApplication((-1617L));
      parentController0.showOneCommonNotice(0L);
      parentController0.showSpecificNotices("org.springframework.web.bind.annotation.RequestMethod");
      parentController0.disagreeApplication((-1617L));
      parentController0.showSpecificNotices("pEnOL:##{52j>R");
      parentController0.disagreeApplication((-1L));
      parentController0.disagreeApplication(2024L);
      parentController0.findParentInfoByMail("K%p_(m0%=c&{JU[N&G7");
      parentController0.disagreeApplication((-1L));
      parentController0.update((Parent) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.applyToJoinClass("pEnOL:##{52j>R", httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      List<CommonNotice> list0 = parentController0.showCommonNotices("email");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.applyToJoinClass("", httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      SpecificNotice specificNotice0 = parentController0.showOneSpecificNotice(2268L);
      assertNull(specificNotice0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      CommonNotice commonNotice0 = parentController0.showOneCommonNotice((-1L));
      assertNull(commonNotice0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).disagreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.disagreeApplication(0L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.agreeApplication((-1L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      doReturn(false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.findParentInfoByMail("");
      parentController0.update((Parent) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(parentInfoService0).showSpecificNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      List<SpecificNotice> list0 = parentController0.showSpecificNotices((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      // Undeclared exception!
      try { 
        parentController0.showStudentScores(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.nju.vivofinal.controller.ParentController", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((Parent) null).when(parentInfoService0).findParentByMail(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      Parent parent0 = parentController0.findParentInfoByMail("fQNvGk^yiX6|");
      assertNull(parent0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.update((Parent) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(parentInfoService0).showCommonNotices(anyString());
      doReturn((List) null).when(parentInfoService0).showSpecificNotices(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      doReturn((StudentScore) null).when(statisticsService0).showStudentScores(anyString());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      parentController0.showSpecificNotices("7*`/XHP7h0R:v!%");
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((List<CommonNotice>) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.showStudentScores(httpServletRequest0);
      List<CommonNotice> list0 = parentController0.showCommonNotices("7*`/XHP7h0R:v!%");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParentController parentController0 = new ParentController();
      Parent parent0 = mock(Parent.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(parent0).toString();
      CommonNotice commonNotice0 = mock(CommonNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(commonNotice0).toString();
      SpecificNotice specificNotice0 = mock(SpecificNotice.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(specificNotice0).toString();
      ParentInfoService parentInfoService0 = mock(ParentInfoService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parentInfoService0).agreeApplication(anyLong());
      doReturn(false).when(parentInfoService0).applyToJoinClass(anyString() , anyString());
      doReturn(false, false).when(parentInfoService0).disagreeApplication(anyLong());
      doReturn(parent0, parent0).when(parentInfoService0).findParentByMail(anyString());
      doReturn(commonNotice0, (CommonNotice) null).when(parentInfoService0).showOneCommonNotice(anyLong());
      doReturn(specificNotice0, (SpecificNotice) null).when(parentInfoService0).showOneSpecificNotice(anyLong());
      doReturn(false, false).when(parentInfoService0).updateParentInfo(any(Parent.class));
      Injector.inject(parentController0, (Class<?>) ParentController.class, "parentInfoService", (Object) parentInfoService0);
      StatisticsService statisticsService0 = mock(StatisticsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(parentController0, (Class<?>) ParentController.class, "statisticsService", (Object) statisticsService0);
      Injector.validateBean(parentController0, (Class<?>) ParentController.class);
      boolean boolean0 = parentController0.disagreeApplication((-2705L));
      parentController0.findParentInfoByMail((String) null);
      parentController0.update((Parent) null);
      parentController0.findParentInfoByMail("&97yOcfiz");
      parentController0.showOneSpecificNotice((-1L));
      parentController0.showOneCommonNotice((-1L));
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession(anyBoolean());
      parentController0.applyToJoinClass("y+", httpServletRequest0);
      parentController0.disagreeApplication((-1628L));
      parentController0.agreeApplication((-1L));
      parentController0.showOneSpecificNotice((-1L));
      parentController0.showOneCommonNotice((-1628L));
      boolean boolean1 = parentController0.update((Parent) null);
      assertTrue(boolean1 == boolean0);
  }
}
